import { useState } from 'react';
import styles from './ContactSection.module.css';

export default function ContactSection() {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    consent: false
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [phoneError, setPhoneError] = useState('');
  const [consentError, setConsentError] = useState(false);

  const validatePhone = (phone) => {
    const phoneRegex = /^[\+]?[7|8]?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    if (!phone) return '';
    if (!phoneRegex.test(phone)) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    return '';
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (name === 'phone') {
      setFormData({ ...formData, [name]: value });
      const error = validatePhone(value);
      setPhoneError(error);
    } else {
      setFormData({ 
        ...formData, 
        [name]: type === 'checkbox' ? checked : value 
      });
      if (name === 'consent' && checked) {
        setConsentError(false);
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const phoneValidationError = validatePhone(formData.phone);
    if (phoneValidationError) {
      setPhoneError(phoneValidationError);
      return;
    }
    
    if (!formData.consent) {
      setConsentError(true);
      return;
    }
    
    if (!formData.name || !formData.phone) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }
    
    setConsentError(false);
    setIsSubmitting(true);

    const message = `üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞

üë§ –ò–º—è: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìç –ò—Å—Ç–æ—á–Ω–∏–∫: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

    try {
      const response = await fetch(`https://api.telegram.org/bot8498114010:AAFcJmkf9AOaA2p6xUgaQ0edyNJPOIgY2DI/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: '682859146',
          text: message,
          parse_mode: 'HTML'
        })
      });

      if (response.ok) {
        setIsSuccess(true);
        setFormData({ name: '', phone: '', consent: false });
        setPhoneError('');
        setConsentError(false);
        setTimeout(() => setIsSuccess(false), 5000);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <section className={styles.contactSection}>
      <div className={styles.container}>
        <div className={styles.contentGrid}>
          {/* –§–æ—Ä–º–∞ */}
          <div className={styles.formWrapper}>
            <h2 className={styles.formTitle}>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h2>
            <p className={styles.formSubtitle}>
              –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
            </p>
            
            {isSuccess ? (
              <div className={styles.successMessage}>
                <div className={styles.successIcon}>‚úì</div>
                <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</h3>
                <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>
              </div>
            ) : (
              <form onSubmit={handleSubmit} className={styles.form}>
                <div className={styles.inputGroup}>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    className={styles.input}
                    placeholder="–í–∞—à–µ –∏–º—è"
                  />
                </div>
                
                <div className={styles.inputGroup}>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    required
                    className={`${styles.input} ${phoneError ? styles.inputError : ''}`}
                    placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                  />
                  {phoneError && <div className={styles.errorText}>{phoneError}</div>}
                </div>
                
                <div className={styles.checkboxGroup}>
                  <label className={`${styles.checkboxLabel} ${consentError ? styles.error : ''}`}>
                    <input
                      type="checkbox"
                      name="consent"
                      checked={formData.consent}
                      onChange={handleInputChange}
                      required
                    />
                    <span className={styles.checkmark}></span>
                    <span className={styles.checkboxText}>
                      –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    </span>
                  </label>
                  {consentError && <div className={styles.errorText}>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö</div>}
                </div>
                
                <button type="submit" className={styles.submitButton} disabled={isSubmitting}>
                  {isSubmitting ? (
                    <>
                      <span className={styles.spinner}></span>
                      –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                    </>
                  ) : (
                    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
                  )}
                </button>
              </form>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
          <div className={styles.infoWrapper}>
            <div className={styles.infoContent}>
              <h3 className={styles.infoTitle}>–ò–∑—É—á–∏—Ç–µ –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã</h3>
              <p className={styles.infoText}>
                –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã –Ω–∞ –Ω–∏—Ö
              </p>
              
              <div className={styles.buttonGroup}>
                <a href="/catalog" className={styles.actionButton}>
                  <div className={styles.buttonIcon}>üè†</div>
                  <span>–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã</span>
                </a>
                
                <a href="/otzyvy" className={styles.actionButton}>
                  <div className={styles.buttonIcon}>üìπ</div>
                  <span>–í–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã –∏ –æ—Ç–∑—ã–≤—ã</span>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}